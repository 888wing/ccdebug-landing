class StorageHelper{constructor(){this.cache=new Map}async get(e,r={}){try{const t=await chrome.storage.sync.get(e);return{...r,...t}}catch(e){return console.error("Storage get error:",e),r}}async set(e){try{await chrome.storage.sync.set(e),Object.entries(e).forEach(([e,r])=>{this.cache.set(e,r)})}catch(e){throw console.error("Storage set error:",e),e}}async remove(e){try{await chrome.storage.sync.remove(e),Array.isArray(e)?e.forEach(e=>this.cache.delete(e)):this.cache.delete(e)}catch(e){throw console.error("Storage remove error:",e),e}}async clear(){try{await chrome.storage.sync.clear(),this.cache.clear()}catch(e){throw console.error("Storage clear error:",e),e}}async getUsage(){try{return{bytesInUse:await chrome.storage.sync.getBytesInUse(),quota:chrome.storage.sync.QUOTA_BYTES}}catch(e){return console.error("Storage usage error:",e),{bytesInUse:0,quota:0}}}onChange(e){const r=(r,t)=>{"sync"===t&&e(r)};return chrome.storage.onChanged.addListener(r),()=>chrome.storage.onChanged.removeListener(r)}}class SettingsManager{constructor(){this.storage=new StorageHelper,this.defaults={enableMonitoring:!0,apiEndpoint:"https://api.ccdebugger.com/analyze",language:"en",maxErrors:100,enableNotifications:!0,enableBadge:!0,theme:"auto",debugMode:!1,customPatterns:[],ignoredDomains:[],ignoredErrors:[]}}async getAll(){return await this.storage.get(Object.keys(this.defaults),this.defaults)}async get(e){return(await this.getAll())[e]}async update(e){const r={};Object.entries(e).forEach(([e,t])=>{e in this.defaults&&(r[e]=t)}),await this.storage.set(r)}async reset(){await this.storage.set(this.defaults)}async export(){const e=await this.getAll();return{version:chrome.runtime.getManifest().version,timestamp:(new Date).toISOString(),settings:e}}async import(e){e&&e.settings&&await this.update(e.settings)}}class ErrorStorage{constructor(){this.storage=new StorageHelper,this.maxErrors=100}async storeError(e,r){const t=`errors_${e}`,s=await this.getErrors(e);s.push({...r,id:`${e}_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,timestamp:r.timestamp||(new Date).toISOString()}),s.length>this.maxErrors&&s.splice(0,s.length-this.maxErrors),await this.storage.set({[t]:s})}async getErrors(e){const r=`errors_${e}`;return(await this.storage.get(r,{[r]:[]}))[r]||[]}async clearErrors(e){const r=`errors_${e}`;await this.storage.remove(r)}async getAllErrors(){const e=await chrome.storage.sync.get(null),r={};return Object.entries(e).forEach(([e,t])=>{if(e.startsWith("errors_")){const s=e.replace("errors_","");r[s]=t}}),r}async clearAll(){const e=await chrome.storage.sync.get(null),r=Object.keys(e).filter(e=>e.startsWith("errors_"));await this.storage.remove(r)}}window.storageHelper=new StorageHelper,window.settingsManager=new SettingsManager,window.errorStorage=new ErrorStorage;